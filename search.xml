<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python基础知识总结(2)]]></title>
    <url>%2F2019%2F08%2F26%2FPython%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93-2%2F</url>
    <content type="text"><![CDATA[控制流for循环语法 12for var in sequence： 缩进的语句块 其中sequence可以是等差数列、字符串、列表、元组或者是一个文件对象。变量依次被赋予序列中的每一个值， 然后在缩进的语句块中的语句将在每一次赋值后执行一次，直到每个值都被执行。range（）可以用来产生一个等差数列。如果m和n是整数，并且m &lt; n，则函数range(m,n)会产生一系列整数，（m、m+1、。。。，n-1） pass语句 for循环经过一次循环条件就进入循环体，在循环体内执行循环 Python函数内建函数123int()chr()ord() 自定义函数语法格式 123def functionName(arg1, arg2,…,argN)： 缩进的语句块 return 表达式 在函数的定义中，arg1，…,argN表示形参返回的表达式可以计算任何类型的字面值。 将实参传递给形参有三种方式： 按照位置传递。 按照关键字传递。 按照默认值传递。 函数的命名规则与变量命名规则一样，包括数字、字母和下划线，但是数字不能作为开始字符。通过形参传递实参给函数，即使改变了形参的值也不会改变实参的值。要改变实参的值，只能通过函数返回值，赋给实参 函数作用域一个变量的作用域指的是程序中可以引用它的范围。变量作用域分为两种： 局部作用域：在函数内部建立的变量只能被同一函数内部的语句访问，并且当函数退出后变量就不存在了，这样变量的存在范围就是局部的，或者说变量具有局部作用域。 全局作用域：一个变量可以被程序中的任何部分识别，这样的变量具有全局作用域。 命名常量 字母大写 列表生成式1[x**0.5 for x in list1 if x &gt;= 0] 默认值参数的默认值是：函数调用时参数的默认取值。由于在很多时候，有些参数的取值可以是缺省的，这样函数就可以在默认的状态下工作。 12345def total(w,x,y=10): return (w**x)+ytotal(2,3) : 18total(2,3,4) : 12 lambda表达式Lambda表达式是一行代码构成的微型函数，经常用在一个需要简单函数的地方。它用于计算一个表达式，但是不能用来代替一个复杂的函数。语法： 1lambda arg1, arg2, …：expression 例1： 1List1.sort(key=lambda x：x[-1]) sort函数和sorted函数区别前面提到的sort函数直接实现列表中的元素排序，sorted函数会返回一个新的已排序的列表。list.sort()与sorted()的区别： list.sort()是在原列表自身上排序，执行完毕后list列表就修改了,sort()方法只能用在列表上。 sorted()函数是重新生成一个排好序的列表，而原列表不变,并且sorted()不仅可以用在列表上，还可以用在元组和字符串中。 字典、集合集合集合是元素的无序存储容器，不允许元素出现重复。语法：set1 = {value0, value1,…,valueN}集合中的元素类型未必一致，但是必不重复。 集合与列表的区别： 集合外边是花括号，而列表是方括号 集合不可以容纳列表、元祖#和集合，但是列表可以容纳列表和集合 集合中元素无序且不能重复，因此不能用下标索引，而列表中元素可以重复也可以用下标索引。 集合操作 在集合中添加元素set1.add(elem)例如：{1，“egg”}.add(“spam”)结果是{1，“egg”,“spam”} 删除指定元素set1.discard(elem)例如：{1， “egg”,“spam”}.discard(“egg”)结果是{1，“spam”} 清空集合set1.clear()例如：{1，“spam”}.clear()结果是{} 集合构造函数将一个列表转换为集合，或将一个元组转换为集合，例如：set（[3,7,3]）为{3,7}，set((3,7,7))为{3,7} 集合之间可以进行求并集、交集和差集。 并集运算：set1.union(set2)将set1和set2中元素合并同时去重形成新的集合。 交集运算：set1.intersection(set2)将set1和set2中的公共元素组成新的集合。 差集运算：set1.difference(set2)将set1中有set2中没有的元素组成新的集合。 字典字典是使用花括号包裹住逗号分隔的“key:value”对。 组成单位是键值对。 键必须是不可变对象（如字符串、数值或元组），但是值可以是任意的数据类型。 键必须是唯一的，值不必是。即键名不能重复。 字典操作 len(d) 计算字典d中键值对的个数 x in d 如果x是字典的一个键，返回True x:y in d 如果x:y是字典的一个键值对，返回True。 x:y not in d如果x:y不在字典中，返回True。 d[key]=value,如果key已经是字典的键，则将key对应的值赋为value。如果key不存在，则将新生成一个key:value对。 d[key]返回key对应的值，若key不存在则报异常。 d.get(key, default)返回key对应的值，若key不存在则返回default的值。 list(d.keys())返回字典键组成的列表。 list(d.values())返回字典值组成的列表. list(d.items()) 返回（key:value）形式的二元元组列表。 list(d)返回字典键组成的列表。 tuple(d)返回字典的键形成的元组。 set(d)返回字典的键形成的集合。 c={}创建一个空字典。 c=dict(d)创建字典d的一个拷贝。 del d[key]删除键为key的元素，若无报异常。 d.clear() 删除字典中的所有元素 for k in d遍历字典所有键 d.update(c)将字典所有元素并入d。若两个元素有相同的键，则使用c中的更换d中的值。 max(d) 求最大的键值，要求所有键的类型一致。 min(d) 求最小的键值，要求所有键的类型一致。 Pickle模块持久化以二进制形式写入文件 list： 查找和插入的时间随着元素的增加而增加 占用空间小，浪费内存很少 dict： 查找和插入的速度很快、不会随着key的增加而变慢 需要占用大量内存，内存浪费多 类和对象传统程序的设计，随着项目的扩大、复杂度的增加，参与项目的人员也越来越多，同时整个程序的关联性和依赖性呈指数级增加。一个程序员在代码处的小小改动就可能连带整个项目作出巨大改变，解决程序依赖性的重要原则就是： 数据隐藏，即在开发的过程中尽可能地隐藏程序的实现细节，是面向对象设计的重要原则。 对象是数据以及对数据操作方法的封装，其他程序员在使用一个对象时，仅需要关注该对象的实现功能以及相关参数，而不需要知道这个对象的具体数据以及实现细节。 类是对一类事物的描述，包括属性和方法。 类的定义方法： 12class ClassName： 类的一系列方法 注意： 类名规则：类名与变量命名相同，但是一般首字母大写，其驼峰式命名。 类方法定义与一般函数相同，主要区别是第一个参数为self。当创建一个对象时，每个方法中的self参数都指的是这个对象，以便方法知道具体操作的是哪个对象。 一个典型的类定义： 12345678910111213141516171819class Rectangle： def __init__(self, width=1, height=1): #构造函数 self._width=width #属性 self._height=height def setWidth(self, width): #赋值方法 self._width = width def setHeight(self, height): #赋值方法 self._height = height def getWidth(self): #取值方法 return self._width def getHeight(self):#取值方法 return self._height def __str__(self): #状态表示方法 return ('Width:'+ str(self._width) + '\nHeight:'+str(self._height)) 对象=属性+方法 属性：对象的特征 方法：对象的行为 继承继承是面向对象设计的一个重要特色，它允许基于现有的类（也称超类、父类或基类）来更新创建一个新类（也称子类、派生类）。子类可以继承父类的属性和方法，也可以增加自己新的属性和方法，同时覆盖父类的方法。子类继承父类后，如果子类init构造函数，调用父类方法须使用super().__init__()]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python基础知识总结(1)]]></title>
    <url>%2F2019%2F08%2F26%2FPython%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93-1%2F</url>
    <content type="text"><![CDATA[1.Python语言简介 Python应用 网络爬虫Scrapy 数据分析 数学计算 Python是解释型同时支持面向对象和面向过程编程的跨平台脚本语言 Python是一门高级语言 Python特点 可拓展 可移植 语法清晰 易维护 高效原型 基于0的计数系统（Python） Python开发环境 IDLE IPython Spyder Anaconda 常用编辑器 VS code Jupyter Notebook Vim Atom Sublime Text Pycharm Python严格要求缩进 PYthon2.7和Python3.5语法对比： 1234#Python2.7print 'hello'#Python3.5print ('hello') Python程序设计方法算法设计工具 流程图 伪代码 层次结构图 判断结构 Python语法基础Python核心对象两种数值类型 整型 没有小数点的数字 浮点型 带有小数点的数字例：67.是浮点型 算术运算符 加 + 减 - 乘 * 除 / 求幂 ** 注意 如果两个数值运算，操作数都是整数则结果是整数，否则如果其中之一是浮点数则结果是浮点数。 0不能做除数 变量定义：变量是一个名称，对应存储在内存中的一个数据，变量的目的是为了便于运算。变量的命名规则：使用字母、数字和下划线构成，但是开始字符不能是数字。 命名规则 驼峰命名：除一个单词外，其他单词的第一个字母是大写。例如：applePie， firstBook，theGoodBoy 下划线命名：apple_pie, first_book, the_1_road 注意 变量命名区分大小写； 一般变量第一个单词不大写，只有类命名大写； 以下划线“_”开头的变量一般为內建变量，例如name； python关键字不能做变量名，例如:for, while等 Python关键字 1234567891011121314151617181920212223242526272829303132333435['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield'] 常用函数 abs(x)函数绝对值函数，即数学运算中的|x|。例如：abs(-5)结果是5, abs(-2.56)结果是2.56, abs(80)结果是80, abs(23*-7.5)结果是172.5 int(x)函数int函数保持整数不变，将浮点数的小数部分丢弃，转换为整数类型。例如：int(9.5)结果为9 int(-8.3)结果为-8 round(x,n)函数round函数，将x的值四舍五入，然后保留n位小数。如果round只有一个参数，则是将x四舍五入去掉小数。偏向偶数例如：round(2.7) 结果是3， round(2.317,2)结果为2.32，round(2.317,1)结果是2.3 数值 增量赋值增量赋值表达式：var += n上述增量赋值表达式的意思是将var增加n之后再赋值给var。 特殊的整型运算符 //地板除，去掉小数部分 %取模运算 括号与优先级括号可以用来清晰地说明表达式的含义。当表达式中有括号时，算数运算符的执行顺序优先级如下： 括号中的部分优先计算（由内而外） 幂运算 乘法、除法、求余运算 加法和减法多个同级的运算符之间从左向右进行运算，例如8/23等价于(8/2)3. 三种类型错误 语法错误 SyntaxError:invalid syntax 运行时异常 逻辑错误 Python中的对象及垃圾回收n=5n=7 5被回收 字符串字符串字面量是字符构成的一个序列，并视其为一个整体。这里的字符是所有的字符，包括字母、数字、标点符号、空格和其他特殊字符str=&#39;abc&#39; 切片和索引 索引 正索引 负索引 切片 [m:n]包括m不包括n str.find() 返回对应字符的索引值（从左查找）str.rfind() 返回对应字符的索引值（从右查找） 字符串拼接 +拼接 *重复 字符串方法 len(str)求出字符串str的长度 str.upper()将字符串str中所有的字符都变成大写，但str本身不变。 str.lower()将字符串str中所有的字符都变成小写，但str本身不变。 str.count(‘substr’)计算str中substr的个数。 str.capitalize()字符串中首字母大写其他字母小写，“coDE”.capitalize()结果“Code” str.title()字符串中每个单词的首字母大写，例如“good boy”.title()结果是“Good Boy” str.strip()和str.rstrip()分别表示移除字符串中所有的空白字符和字符串末尾的空白字符。 内置函数 int(x)int函数用来将一个字符串转变为一个整数 float(x)float函数用来将一个字符串转变为一个浮点数 eval(x)eval函数将计算相应表达式x，得到合适的整型或浮点型，例如：eval(“23+46.8”)结果是浮点数69.8 str(x)str函数将数字转变为字符串，例如str(5.7)结果是字符串“5.7” input()输入函数 print() 输出函数 sep分隔符，默认分隔符是空格 end结尾符，默认是换行符 域内输出对齐 ljust(n):表示输出域宽为n，并且左对齐 rjust(n):表示输出域宽为n，并且右对齐 center(n):表示输出域宽为n，并且是居中对齐 集合列表列表是Python中的一个有序序列，其中的对象可以是任何类型，并不要求类型必须一致。注意： 列表对象中的元素可以类型不一致； 元素之间的分隔符是逗号； 元素列表用方括号括起来； 列表重点元素可以使用下标索引，例如list[2],下标序号从0开始 列表常见操作 列表中元素个数：len(list) 最大值：max(list) 要求元素类型相同 最小值：min(list) 要求元素类型相同 求和：sum(list) 要求元素类型必须是数字 对象出现次数：list.count(elem) 一个对象首次出现的索引值：list.index(elem) 逆序：list.reverse() 清空列表：list.clear() 末端插入对象：list.append() 末端插入新列表：list.extend(newList) 删除给定索引位置上的元素 del list[index] 删除第一次出现的对象 list.remove(elem) 在给定索引位置上插入新元素list.insert(ix, elem) 列表连接：list1+list2 相当于list1.extend(list2) 列表重复：list*n 将列表list重复n次，变成一个新列表 列表切片同字符串切片 split和join方法 split 从字符串到列表 从列表到字符串 元组元组与列表类似，是元素的有序序列。元组与列表的区别是元组不可以直接修改，元组中的元素也不可以被删除，但是元组中的元素可以被索引、切片和连接。 元组中的元素不一定要类型一致 元组中的元素可以对应赋值，例如：(x,y,z)=(1,2,3) 结果x为1，y为2，z为3 没有append、extend、insert 嵌套列表嵌套列表使用多下标索引 列表嵌套元组使用多下标索引，元组不可被修改 可变对象和不可变对象 list、字典、集合是可变对象 数值、元组 、字符串都是不可变对象 文件读写关系和逻辑运算ASCII码 chr() 由ASCII码转字符 ord() 由字符转ASCII 关系运算符 Python符号 数学含义 字符串含义 == 等于 相同的 ！= 不等于 不同的 &lt; 小于 按字典序先于 &gt; 大于 按字典序后于 &lt;= 小于等于 按字典序先于或位置相同 &gt;= 大于等于 按字典序后于或位置相同 in 是子串 not in 不是子串 列表的排序list.sort() 逻辑运算符 and or not 短路求值当遇到与条件（cond1 and cond2）时，如果cond1为假， Python会认为整个条件为假，进而不对cond2计算，当遇到或条件 (cond1 or cond2)时,如果cond1为真，Python会认为整个条件为真，而不继续计算cond2。这个过程被称为短路求值。 布尔变量Python的布尔类型有两个值：True和False。 简化条件列表或元组有时可以用来简化包含逻辑运算符的长复合条件。在逻辑代数中，德摩根定律定义如下： not(cond1 and cond2) 等价于 not(cond1) or not(cond2) not(cond1 or cond2) 等价于 not(cond1) and not(cond2) 控制流 if语句 1234if condition: 缩进的语句块else: 缩进的语句块 循环语句 while 循环 12while condition: 缩进的语句块 while循环中的条件称为继续条件 缩进的代码块称为循环体。 在执行while循环时，首先判断循环条件是否为真，若是则继续执行循环体，若是假则跳出循环执行循环后边的语句。 循环会执行到条件变成假为止。 for循环 break,continue break 跳出所有循环 continue 跳出当前循环]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux基础知识总结(二)]]></title>
    <url>%2F2019%2F08%2F25%2FLinux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93-%E4%BA%8C%2F</url>
    <content type="text"><![CDATA[文件权限如何修改Linux文件属性与权限 chgrp 改变文件用户组 chgrp [-R] dirname filename ... chown 改变文件拥有者 chown [-R] 帐号名称 文件或目录 chown [-R] 帐号名称:用户组组名称 文件或目录 选项与参数： -R : 进行递归(recursive)的持续变更，亦即连同次目录下的所有文件都变更 chmod 改变文件权限 权限分数对照: x:1,w:2,r:4 chmod u/g/o/a +/-/= r/w/x 增减/赋值权限 目录与文件的权限意义文件是实际含有数据的地方，包括一般文本文件、数据库文件、二进制可执行文件(binary program)等等。 因此，权限对于文件来说，他的意义是这样的： r (read)：可读取此文件的实际内容，如读取文本的文字内容等； w (write)：可以编辑、新增或者是修改该文件的内容(但不含删除该文件) x (eXecute)：该文件具有可以被系统执行的权限。 mkdir:创建目录 -m：设定文件权限 -p：递归建立 cd：切换目录 pwd：显示当前路径 显示真正路径而非使用链接的路径 rmdir:删除一个空的目录 -P：连同上层空目录一块删 linux文件种类与扩展名 常规文件- 目录d 链接文件l 区块文件b 字符c 数据接口文件s 数据输送文件p Linux目录配置绝对路径与相对路径 绝对路径：由根目录(/)开始写起的文件名或目录名称， 例如 /home/dmtsai/.bashrc； 相对路径：相对于目前路径的文件名写法。 例如 ./home/dmtsai 或 ../../home/dmtsai/ 等等。反正开头不是 / 就属于相对路径的写法 . ：代表当前的目录，也可以使用 ./ 来表示； .. ：代表上一层目录，也可以 ../ 来代表。 Linux文件和目录管理目录与路径 . 此层目录 .. 上一层目录 - 前一个工作目录 ~ 当前用户home目录 ~用户名 用户的home目录 命令 cp [-adfilprsu] 来源文件(source) 目标文件(destination) cp [options] source1 source2 source3 …. directory -a ：相当于 -dr –preserve=all 的意思，至于 dr 请参考下列说明；(常用)不改变属性 -i ：若目标文件(destination)已经存在时，在覆盖时会先询问动作的进行(常用) -p ：连同文件的属性(权限、用户、时间)一起复制过去，而非使用默认属性(备份常用)； -r ：递归复制，用于目录的复制行为；(常用)最后需要注意的，如果源文件有两个以上，则最后一个目的文件一定要是『目录』才行！ -d：若源文件为链接文件的属性（link file）,则复制链接文件属性而非文件本身。 -s 建立软连接 -l 建立硬链接 -u 当有差异时才会复制 rm [-options] 文件或目录 -f 就是 force 的意思，忽略不存在的文件，不会出现警告讯息； -i 互动模式，在删除前会询问使用者是否动作 -r 递归删除 危险 mv [options] 源文件 目标文件 -f -i -u cat 由第一行开始显示文件内容 -A ：相当于 -vET 的整合选项，可列出一些特殊字符而不是空白而已； -b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！ -E ：将结尾的断行字符 $ 显示出来； -n ：列印出行号，连同空白行也会有行号，与 -b 的选项不同； -T ：将 [tab] 按键以 ^I 显示出来； -v ：列出一些看不出来的特殊字符 tac 从最后一行开始显示，可以看出 tac 是 cat 的倒著写！ nl 显示的时候，顺道输出行号！(不重要) -b ：指定行号指定的方式，主要有两种： -b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)； -b t ：如果有空行，空的那一行不要列出行号(默认值)； -n ：列出行号表示的方法，主要有三种： -n ln ：行号在屏幕的最左方显示； -n rn ：行号在自己栏位的最右方显示，且不加 0 ； -n rz ：行号在自己栏位的最右方显示，且加 0 ； -w ：行号栏位的占用的字符数。 more 一页一页的显示文件内容 less 与 more 类似，但是比 more 更好的是，他可以往前翻页！ head 只看头几行 tail 只看尾几行 od 以二进制的方式读取文件内容！ touch 新建文件 which 查询命令路径(指定路径更少) whereis 查找其它命令(指定路径更多) locate 另一种查找命令 find 还是一种查找命令(毁磁盘，机械硬盘慎用)]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux基础知识总结(一)]]></title>
    <url>%2F2019%2F08%2F23%2FLinux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93-%E4%B8%80%2F</url>
    <content type="text"><![CDATA[1.1 Linux是什么Linux就是一个操作系统，计算机主机由一堆硬件所组成，为了有效地控制这些硬件资源，于是乎就有操作系统的产生。操作系统除了有效地控制这些硬件资源的分配，并提供计算机运行所需要的功能（如网络功能）之外，为了要提供程序员更容易开发软件的环境，所以操作系统也会提供一整组系统调用接口来给程序员开发用。内核与硬件的关系非常紧密，早期的Linux是针对386的计算机来开发的，由于Linux只是一个操作系统，并不含有其他的应用程序，因此工程师在下载了Linux之后，只是使计算机Ready，接下来高级工程师再根据自己的需求，在Linux上安装其所需要的软件 操作系统如果能够将所有硬件驱动，并且提供一个软件的参考接口来给工程师进行开发，开发软件的工作就会变得简单，这就是操作系统。 内核操作系统（Operating System，OS）其实也是一组程序，这组程序的重点在于管理电脑的所有活动及驱动系统中的所有硬件。 内核功能 系统调用接口 进程管理 内存管理 文件系统管理 设备驱动 几个关键概念 操作系统的内核层直接参考硬件规格写成，所以同一个操作系统程序不能够在不一样的 件架构下运行。 操作系统只是管理整个硬件资源，包括CPU、内存、输入输出设备及文件系统等。即仅 电脑Ready，真正实现功能的是应用程序软件。 应用程序的开发都是参考操作系统提供的API，所以该应用程序只能在该操作系统上面运 而已，不可以在其他操作系统上运行。 其它操作系统 Windows Mac OS Linux应用 企业应用 网络服务器 关键任务的应用 学术机构的高性能计算 个人应用 桌面计算机 手持系统(PDA、手机) 嵌入式系统 云端应用 云程序 终端设备 如何学习Linux 选择一本好书《鸟哥的Linux私房菜》 计算机概论与硬件相关知识 Linux的安装与命令 Linux操作系统的基础技能（用户、用户组、权限、程序） Vi文本编辑器 Shell与Shell脚本 软件管理（Tarball、RPM、DPKG、YUM、APT） 网络基础的建立（IP、路由） 网站搭建 Vmware CentOS安装略…… CentOSLinux是多人多任务系统不同于Windows的单人多任务系统Linux的高度稳定性支持长时间运行 Linux默认提供六个终端供用户登录 终端切换快捷键为Ctrl+Alt+F1~F6 在终端鼠标退出虚拟机快捷键为Ctrl+Alt 终端用户输入startx命令启动图形界面（图形界面其实就是命令行界面+X Window软件） 电源设置 命令 格式：[用户名@主机名 当前路径]$command [-options] parameter1 parameter2 … 注意 一行指令中第一个输入的部分绝对是『命令(command)』或『可执行文件(例如Shell脚本)』 command 为命令的名称，例如变换工作目录的命令为 cd 等等； 中刮号[]并不存在于实际的指令中，而加入选项设定时，通常选项前会带 - 号，例如 -h；有时候会使用选项的完整全名，则选项前带有 – 符号，例如 –help； parameter1 parameter2.. 为依附在选项后面的参数，或者是 command 的参数； 命令, 选项, 参数等这几个东西中间以空格来区分，不论空几格 shell 都视为一格； 按下[Enter]按键后，该指令就立即执行。[Enter]按键代表著一行指令的开始启动。 指令太长的时候，可以使用反斜线 () 来跳脱[Enter]符号，使指令连续到下一行。（8）在 Linux 系统中，英文大小写字母是不一样的。举例来说， cd 与 CD 并不同。 ls 列出当前目录文件 -a 列出全部文件(包括隐藏和系统保留文件) -l 列出详细信息(蓝色代表目录) -i 列出inode号码 --full-time 显示详细时间 --color=never 不显示颜色 date 当前日期(区分大小写) +%Y/%m/%d 格式化输出 cal (calendar) 显示日历 bc 计算器 快捷键 tab 补全功能(命令和文件) ctrl + c 中断运行 ctrl + d 退出程序 shift + pageup/pagedown 上下翻页 --help 帮助 man 使用手册 who 查看使用 netstat 查看网络状态 ps -aux 查看后台执行程序 stat 查看文件源信息 touch 新建文件 ln 创建硬链接 -s 创建软连接 clear 清屏 文件权限用户与用户组 Linux一般将文件可读写的身份分为三个类别，分别是 owner/group/others，且三种身份各有 read/write/execute 等权限。 用户 用户组 Linux文件属性文件类型 文件拥有者权限 用户组权限 其他人权限 链接数 文件拥有者 用户组名 文件大小 修改时间 文件名i-node：文件存储在硬盘上，硬盘的最小存储单位叫做“扇区”（Sector）。每个扇区储存512字节（相当于0.5KB）。操作系统读取硬盘的时候，不会一个个扇区的读取，这样效率太低，而是一次性连续读取多个扇区，即一次性读取一个“块”（block）。这种由多个扇区组成的“块”，是文件存取的最小单位。“块”的大小，最常见的是4KB，即连续八个sector组成一个block。文件数据都储存在“块”中，那么很显然，我们还必须找到一个地方储存文件的“元信息”，比如文件的创建者、文件的创建日期、文件的大小等等。这种储存文件元信息的区域就叫做inode，中文译名为”索引节点“。 i-node内容： Size 文件的字节数 Uid 文件拥有者的User ID Gid 文件的Group ID Access 文件的读、写、执行权限 文件的时间戳，共有三个: Change 指inode上一次变动的时间 Modify 指文件内容上一次变动的时间 Access 指文件上一次打开的时间 Links 链接数，即有多少文件名指向这个inode Inode 文件数据block的位置 Blocks 块数 IO Blocks 块大小 Device 设备号码 使用命令 stat 文件名查看 硬链接一般情况下，文件名和inode号码是”一一对应”关系，每个inode号码对应一个文件名。但是，Unix/Linux系统允许，多个文件名指向同一个inode号码。使用命令ln创建硬链接：ln 源文件 目标文件 软链接文件A和文件B的inode号码虽然不一样，但是文件A的内容是文件B的路径。读取文件A时，系统会自动将访问者导向文件B。因此，无论打开哪一个文件，最终读取的都是文件B。这时，文件A就称为文件B的”软链接”（soft link）或者”符号链接（symbolic link）。这是软链接与硬链接最大的不同：文件A指向文件B的文件名，而不是文件B的inode号码，文件B的inode”链接数”不会因此发生变化。使用命令ln -s创建硬链接：ln -s 源文件 目标文件对于目录文件，x权限代表可进入目录，r权限只是可浏览 如何修改Linux文件属性与权限 chgrp 改变文件用户组 chgrp [-R] dirname filename ... chown 改变文件拥有者 chown [-R] 帐号名称 文件或目录 chown [-R] 帐号名称:用户组组名称 文件或目录 选项与参数： -R : 进行递归(recursive)的持续变更，亦即连同次目录下的所有文件都变更 chmod 改变文件权限 权限分数对照: x:1,w:2,r:4]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[程序设计语言与软件的可信性问题总结]]></title>
    <url>%2F2019%2F04%2F18%2F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%E4%B8%8E%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%8F%AF%E4%BF%A1%E6%80%A7%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[1.软件定义一切的时候带2.程序语言与软件可信3.软件可信保障方法4.程序可信性保障进展 1.1 软件工程发展时间线1.2 新时代下的软件工程 万物皆可互联一切皆可编程 支持 数据资源 用户资源应用 大数据 人工智能平台 移动互联网 互联网 物联网硬件 移动设备 云平台 网络设被 终端设备资源 网络资源 存储资源 计算资源 能源资源 其他资源 1.3 高可信的挑战与机遇大规模软件系统带来的挑战：代码审核 集成测试与系统测试人工智能系统带来的挑战：系统安全与用户隐私 系统测试与调试 行为解释与高可信度 软件定义世界 质量保证未来 2.1 程序语言的发展历史fortarn-ALGOL60-pascal-Modula-Ada-Simula-C-C++-Java-Python语言设施影响软件可信 goto语句争论 破坏程序静动的一致性 程序不易测试 不利于代码优化 自动VS人工内存管理 基本块的定义方式 花括号定义 if… end if定义 缩进定义 可写性VS可读性 高生产率VS高质量 2.3 高可信对语言的需求 形式化设计支持 可靠的类型系统 规范化编码风格 高可信编译器或解释器 编译器测试 编译器验证 3.1 可信软件的质量要求质量保证开发设计测试维护 3.2 开发方法与软件可信技术问题 质量审查 程序理解 软禁调试 软件维护 管理问题 商业目标 人力资源 软件过程 企业文化 资源与度量 资源分配 成本消耗 人才流动 度量设定 高可信对开发的要求 高可信编码要求 架构与设计优先 代码规范 注释规范 DRY原则 高可信文档维护 高可信写作过程 4软件可信性保障进展4.1软件行为的分析与测试软件代码覆盖工具的功能测试Python类型推导 Python缺陷检测 Python缺陷定位 4.2 程序缺陷的预测与修复4.3 知识驱动的智能化维护4.4 Python语言可信化研究]]></content>
      <categories>
        <category>软件工程</category>
      </categories>
      <tags>
        <tag>学术讲座总结</tag>
        <tag>程序设计语言</tag>
        <tag>软件工程</tag>
        <tag>可信性</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大数据分析及其应用]]></title>
    <url>%2F2019%2F03%2F27%2F%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%2F</url>
    <content type="text"><![CDATA[大数据分析的重要性把大数据作为基础性战略资源全面实施促进大数据行动 大数据定义 大型多样复杂纵向的所有现在和未来可用的其他数字源 大数据是来源众多类型多样大而复杂具备潜在价值但难以在游戏那时间内处理和分析的数据集 大数据三个来源 大数据来源于企业 网络与开源的数据 政府的数据 传统数据分析方法从数据收集、数理统计到描述性结论 数据挖掘方法从数据收集、数据预处理、数据挖掘算法到商务分析的知识发现 贝叶斯法则 数据挖掘的数学工具 统计 决策树 神经元 模糊逻辑 数学规划 多目标最优化数据挖掘方法原理 把数据你中有我 我中有你的分离出来 求是的分类重叠的最小化或类别之间距离最大化的方法 数据挖掘是决策过程选取、变换、挖掘、展示 数据挖掘的机器学习原理训练集-》测试机-》 新数据集 周而复始 数据（结构与非结构）-》粗糙知识（潜在模式）-》主观知识（决策者）智能知识（决策支持） 大数据分析的挑战问题大数据应该既要全体，又要抽样，大数据的抽样比小数据的抽样更具有普适性大数据应从粗糙中寻求精确大数据应从相关关系中把握因果关系与必然关系 在云存储和云计算基础上 如何利用信息技术…如何探索大数据复杂性不确定性特征描述的刻画方法及大数据系统建模研究数据异构性与决策的异构型的关系对大数据知识发现与管理决策的影响 大数据的实质大数据背后是数据科学 数据科学是关于数据收集管理转换分析与应用的儿科学其核心是研究从数据中获取知识数据科学在应用上已经开始逐步取代一直的商务智能与商务分析 大数据挖掘应用 中国个人信用评分系统 一号店客户及商家信用和价值评分 国科大考拉征信大数据模型合作实验室 青少年信用体系建设方案 实时信用卡审批系统 两个国际会议ICCS ICDS 大数据应用与未来未来科技=大数据+新IT技术]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>应用</tag>
        <tag>数据挖掘</tag>
        <tag>BigData</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[keras使用预训练词向量方法]]></title>
    <url>%2F2018%2F11%2F27%2Fkeras%E4%BD%BF%E7%94%A8%E9%A2%84%E8%AE%AD%E7%BB%83%E8%AF%8D%E5%90%91%E9%87%8F%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[要在Keras中使用预训练词向量，首先需要了解Keras中Embedding层的特点，从这篇博文中keras：3)Embedding层详解可以了解到，Embedding层就是根据单词在词表中的索引查找磁词向量矩阵中相应位置的词向量，并替换原来的矩阵。因此要使用预训练词向量不用自己拼接词向量矩阵，而是首先制作词表，将单词转换为索引表示，然后将预训练词向量制作按照词表索引顺序制作成词向量矩阵，然后将该矩阵作为Embedding层的权重，并设置为不可训练。具体详见Keras中加载预训练的词向量这篇博客。 123456789101112131415embeddings_index = &#123;&#125;f = open(os.path.join(GLOVE_DIR, 'glove.6B.100d.txt'))for line in f: values = line.split() word = values[0] coefs = np.asarray(values[1:], dtype='float32') embeddings_index[word] = coefsf.close()embedding_matrix = np.zeros((len(word_index) + 1, EMBEDDING_DIM))for word, i in word_index.items(): embedding_vector = embeddings_index.get(word) if embedding_vector is not None: # words not found in embedding index will be all-zeros. embedding_matrix[i] = embedding_vector 将这个词向量矩阵加载到Embedding层中，注意，设置trainable=False使得这个编码层不可再训练。 123456from keras.layers import Embeddingembedding_layer = Embedding(len(word_index) + 1, EMBEDDING_DIM, weights=[embedding_matrix], input_length=MAX_SEQUENCE_LENGTH, trainable=False)]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>NLP</tag>
        <tag>Embedding</tag>
        <tag>Pre-training</tag>
        <tag>词向量</tag>
        <tag>预训练</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot菜鸟踩坑笔记(1)]]></title>
    <url>%2F2018%2F11%2F14%2FBoot%E8%8F%9C%E9%B8%9F%E8%B8%A9%E5%9D%91%E7%AC%94%E8%AE%B0-1%2F</url>
    <content type="text"><![CDATA[报NullPointerException@Autowired注入失败Dao层代码: 12345678910111213141516171819202122import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.mongodb.core.MongoTemplate;import org.springframework.stereotype.Repository;import java.util.List;@Repository("userDao")public class UserDaoImpl implements UserDao &#123; @Autowired private MongoTemplate mongoTemplate; @Override public List&lt;User&gt; findAll() &#123; return mongoTemplate.findAll(User.class); &#125; @Override public void insert(User user) &#123; mongoTemplate.insert(user); &#125;&#125; test代码(错误示例): 123456789101112131415161718192021import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;@RunWith(SpringRunner.class)@SpringBootTestpublic class InvoicemanagerApplicationTests &#123; @Test public void contextLoads() &#123; User user = new User(); user.setUserName("test"); user.setUserPassword("123"); UserDao userDao = new UserDaoImpl(); userDao.insert(user); System.out.println(userDao.findAll().get(0).getUserName()); &#125;&#125; 会发现报NullpointerException,原因是MongoTemplate为Null。因为MongoTemplate是由Spring Boot自动注入生成的实例，所以在使用时UserDao不应手动new实例，应该也用@Autowired使其注入生成实例。改正后: 12345678910111213141516171819202122import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;@RunWith(SpringRunner.class)@SpringBootTestpublic class InvoicemanagerApplicationTests &#123; @Autowired UserDao userDao; @Test public void contextLoads() &#123; User user = new User(); user.setUserName("test"); user.setUserPassword("123"); userDao.insert(user); System.out.println(userDao.findAll().get(0).getUserName()); &#125;&#125;]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java基础知识总结]]></title>
    <url>%2F2018%2F07%2F15%2FJava%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[语言基础变量的主要要素： 变量的类型 变量的名字 变量的值 注意：java是强类型语言，声明的类型必须跟值保持一致。 变量的三种声明方式： 先声明在赋值 int a; a = 10; 声明并赋值 int a = 10; 多个同类型变量赋值 int a,b,c = 10; 数据类型： 基本数据类型 整数类型 小数类型 布尔类型 字符类型 引用数据类型 字符串类型 数组类型 对象类型 八种数据类型： byte short int long float double char boolean 数据类型转换: 从小类型转换大类型可以编译通过 从大类型转换小类型不允许编译通过 分支和循环条件分支：123if(布尔表达式)&#123; //代码块&#125; if else 只要符合逻辑可以进行多重嵌套 switch分支123456switch(变量&lt;byte,short,int,char,String&gt;)&#123; case 条件1: 代码块1 case 条件2: 代码块2 case 条件3: 代码块3 default: 默认执行代码块&#125; break 本次条件判断结束 循环 while 循环的组成 初始部分 定义变量 布尔条件 循环体 迭代部分 berak 跳出循环体,后续的循环不在执行;continue 跳出本次循环，后续的循环还会在执行break 在哪个循环中使用则跳出哪个循环 函数 完成特定功能的一段代码块 定义在类的内部，并且与main函数并列 参数： 形参：指定义在函数括号内的参数 实参：指调用函数时传入的实际参数。 可变长参数： 定义语法： 变量类型…变量名 规范： 形参列表中只能允许有一个可变长参数，并且只能放在最后一个。 面向对象： 一切皆对象，万物皆对象 类是模板，只有给予了属性和方法才被称之为对象 类：定义了对象应具有的特征和行为，类是对象的模板 对象：拥有多个特征和行为的实体，对象是类的实例 实例变量不需要赋值可以直接使用，都有默认值123String null; int 0; double 0.0; 堆空间共享，栈空间独立 方法重载概念：方法名相同，参数列表不同 与返回值无关 好处：屏蔽用户的差异，灵活，方便 构造方法： 方法名字跟类名保持一致 构造方法不需要返回值 方法在new 创建对象时候被虚拟机调用 对象的创建过程 为对象创建堆空间并赋予一个初始值int 0 String null 为属性赋予默认值 调用构造方法并执行构造方法中的代码 如果类中没有写构造方法，编译器会默认的添加无参的构造方法，如果定义了有参构造方法，则无参构造需要手动添加。 对象的三大特性 封装 继承 多态 java 里边为单继承，一个类只能有一个直接父类; 方法覆盖（ovverride）1. 方法名相同 2. 返回值相同 3. 参数列表相同 4. 访问修饰符相同或者更宽 继承之后对象的构造过程： 分配空间 构造父类对象 初始化属性 调用构造方法 this() super() 都要求写在构造函数的第一行，所以this()和super()只能同时存在一个。 父类引用指向子类对象，叫做多态。在调用父类引用中方法时，真正执行的为实际类型中的方法。 多态可以运用在参数列表上，解决重载冗余多态可以用在返回值类型，解决返回值不一致的问题 ClassCastException 类型强转异常 instanceof 向下转型时 判断实际类型 发挥boolean 结果 父类引用指向子类对象，调用属性（成员变量）和 静态变量和静态方法 都是执行父类中的属性和方法如果调用普通方法或者说是普通函数调用其实是实际类型中的方法。 Java 的三个修饰符 static 可以修饰属性和方法 final 可以修饰类，方法，变量 abstract 局部变量属性 == 变量成员变量（实例变量） == 属性 static 修饰的方法不可以调用非静态方法,非静态方法可以调用静态方法，也可以调用非静态方法.static 修饰的方法不可以使用非静态成员属性，非静态方法可以使用非静态成员变量和静态成员变量。 类加载：在首次使用某个对象时把该对象的.class文件加载到虚拟机并保存的过程叫做类加载 类加载的时机： 创建对象时 创建子类对象时 使用静态属性时 使用静态方法时 Class.forName(“权限定名”); static 可以修饰代码块静态代码块在类加载的时候触发一次，动态代码块在每次创建对象时会被执行一次。 有个继承之后，创建子类对象。 先类加载父类 加载子类 创建父类对象 创建子类 final 修饰的类无法被继承final 修饰的方法无法被覆盖 接口： 概念：接口是一种能力，也是一种规范（标准） 接口：所有变量都是公开的静态常量，所有方法都是公开的抽象方法，如果不加修饰符，编译器默认会自动添加。 接口跟抽象类的区别： 相同点： 都能够声明引用，但都不能创建对象。 不同点： 抽象类中有构造方法，而接口中没有构造方法。 equals 比较两个对象是否是相同对象haseCode 返回对象的hash码值toString 返回该对象的引用地址 集合 存储对象或者说是存储数据的一个容器collection 接口 List: 有序(插入的顺序)有下标，可重复 Set: 无序无下标，不可重复 Map: 键值对存储的集合 ArrayList: 查询快，增删慢，轻量级，查询效率较高 Vector: 查询快，增删慢，重量级，查询效率低 LinkedList: 查询慢，增删快 泛型的表示符： T/E/V/K、 List 的实现类 ArrayList Vector LinkedList List 的常用api详情 泛型语法（了解）Collections 工具类 sort 排序 shuffel 随机重置 reverset 倒序 HastSet 如果存储自定义对象类型，要保证相同元素不被重复添加，需要手动的覆盖 hashCode 和 equals 方法: hashCode 方法的覆盖遵循尽量相同的元素返回相同的hashCode值,不相同的元素尽量要保证hashCode值不相同 LindkedHashSet 元素不能重复，但是保证了于元素的存入顺序。 TreeSet 可以对存储的数据进行排序，如果自定义对象类型需要实现Comparable接口自定义排序规则 Map 集合基于键值对存储 键无序无下标不可重复 值无序无下标可重复。 keySet() 返回map集合的所有键values() 返回map集合的所有值entrySet() 返回map集合集合中的所有键值对 （entry 键值对对象） HashMap 允许使用null 作为key和valueHahTable 不允许使用null 作为key和value 重量级properties 存储 string 类型的键值对，一般读取配置文件 TreeMap 可以对key进行排序，如果key存储的是自定义类型，自定义类型需要实现Coampareabler 接口定义排序规则 异常 超级父类 Throable Error 环境所导致的异常 处理态度 不处理 RuntimeException 运行时异常，未检查异常 可处理可不处理 Exception 非RuntimeException 非运行时异常，检查异常 必须处理 函数调用： main&gt;m1&gt;m2异常传递： m2&gt;m1&gt;main throw 手动的抛出异常语法： throw new 异常名字相当于return 关键字代表着程序的结束throw 代表的是一种动作 抛出异常 用在方法里边throws 代表的是一种声明 用在函数后边，代表声明抛出异常 处理异常的两种方式： 消极处理： throws 积极处理 try{}catch(Exception e){} IO流流的分类： 按照方向： 基于jvm 输入流 输出流 按照单位： 字节流 字符流 按照功能： 节点流 过滤流，包装流，功能流 IO中的常用对象 BufferdOutputStream 默认缓冲区的大小 8192 乱码产生的原因：任何编解码不一致都会导致乱码产生 DataOutputStream/DataInputStream 输出八种基本数据类型 ObjectOutputStream./ObjectInputStream 在八种基本数据类型的基础之上 增加缓冲和输出对象功能 FileReader/FileWriter 可以读写字符文本类型 BufferdReaer/PrintWriter 可以直接读取一行文档 readLine OutputStreamWriter/InputStreamReader 桥转换 桥转换时可以设置编码格式 线程线程的组成部分：CPU时间片数据： 堆空间：引用类型 堆空间数据共享 栈空间：基本类型数据,局部变量 栈空间独立 线程的逻辑代码继承Thread 类的方法创建线程，启动线程更方便，但是限制了线程类去继承其它类实现Runnable 接口的方法创建线程，启动线程较麻烦，但是大大提升了灵活性。 线程同步问题： 当两个线程同时访问临界资源，破坏原子操作时，会造成数据不一致。 临界资源,两个线程同时访问一个对象。 原子操作,两个不可分割的操作。 加锁方式1：123synchronized（对象）&#123;&#125; 加锁方式2：1public synchronized void add()&#123;&#125; 放在函数的修饰上 jdk 中两个线程安全的类 vector HashTable]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>基础</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[中文NLP下的自动问答与会话总结]]></title>
    <url>%2F2018%2F07%2F11%2F%E4%B8%AD%E6%96%87NLP%E4%B8%8B%E7%9A%84%E8%87%AA%E5%8A%A8%E9%97%AE%E7%AD%94%E4%B8%8E%E4%BC%9A%E8%AF%9D%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[作为人工智能的终极难题之一，一个完整的人机对话系统涉及到的技术极为广泛，例如计算机科学中的语音技术，自然语言处理，机器学习，规划与推理，知识工程，甚至语言学和认知科学中的许多理论在人机对话中都有所应用。笼统的讲，人机对话可以分为以下四个子问题：自然语言聊天、任务驱动的多轮对话、问答和推荐。 对最强大的计算机来说，理解人类语言并非易事——这便是自然语言理解的研究领域，所谓“自然语言理解”就是人与计算机可以进行有效沟通，计算机能理解用户的意图，执行命令或回答问题。 AI兴起的三大助推器 强大的计算能力和存储能力 高性能、分布式、云平台 智能问题需要高性能的计算+大容量的存储 大数据 规律（或知识）就在数据之中 网络化与数字化造就了大数据 评测的推动加强了数据的产生 以深度学习为代表的新方法新技术 面对多层神经网络的问题，深度学习有新的突破 数据+评测推动了技术发展 知识库问答的基本框架基本步骤 问句的语义解析：将问句转化为可查询的表示形式 查询知识库 推理得出答案 知识库相关的关键技术 实体链接 关系抽取 早期知识库问答的特点 小规模特定领域的知识库 实体关系数量少 问题模式受限 依赖于人工规则(不支持开放领域) QA任务什么是QA任务？ 侧重于一问一答，即直接根据用户的问题给出精准的答案。问答更接近一个信息检索的过程，虽然也可能涉及简单的上下文处理，但通常是通过指代消解和 query 补全来完成的。问答系统和任务驱动的多轮对话最根本的区别在于系统是否需要维护一个用户目标状态的表示和是否需要一个决策过程来完成任务。[1] 检索+推理 直接查找答案 FAQ 情景问答（查数据库如天气预报） 查知识库 查找+推理 多片段拼接 摘要式问题 过程式问题 其他 推理QA类型 基于无结构文档的QA 基于IR技术的QA（找文档） 基于IE技术的QA（找文档中的精准片段） 基于结构化数据的QA 基于数据库的QA（在数据库中找字段）问机票问天气查快递 基于知识库的DA（在知识库中找关系或推理产生答案） 混合式QA难点 内容 所涉及范围广 问句 需要解决语言理解的方面 语言知识基础 语言分析技术 语义的内部表示 答案 答案的信息（知识）来源（覆盖性） 答案信息的发现（搜索与选择） 答案的生成与组织（语言生成技术）技术挑战技术受制于知识／数据 结构化知识的不完善：基于规则的思想 实例化知识的数量不够大：基于学习的思想方法（模型）的受限 模型本身存在问题 DNN效果难完全重现、参数量大、不容易解释（黑盒） SVM高维导致严重的数据稀疏（泛化能力差） 模型的适应能力不强 从规范数据迁移到非规范数据 从日常领域迁移到专业领域 无指导学习的作用十分有限 会话会话的基本特点* ２个或２个以上的参与者 * 以互动形式平滑推动话题的演化发展 两种典型的会话闲聊式会话 不要求有固定目标 话轮多，可以漫无边际 机器不按规则出牌反而带来意想不到的体验垂直领域的服务型会话 有明确目标——解决问题 话轮少，尽快逼近问题的答案 答非所问将严重影响体验效果问答与服务型会话的区别问答：问题的直接回答问题（单轮）会话：问题的逐步回答（多轮，dialogue）服务型会话与问答的关联会话是对复杂问题的逐步解答过程：计算机理解问题需要多次询问用户是多个问答对的有序序列 答与问的关系 问与问的关系＋答与答的关系 计算机和用户具有问和答的角色转换关系服务型会话中的闲聊（混合式）自然轻松的方式]]></content>
      <categories>
        <category>NLP</category>
      </categories>
      <tags>
        <tag>NLP</tag>
        <tag>中文</tag>
        <tag>自动问答</tag>
        <tag>会话系统</tag>
        <tag>AI</tag>
        <tag>学术讲座总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[实现Hexo博客多终端更新]]></title>
    <url>%2F2018%2F05%2F17%2F%E5%AE%9E%E7%8E%B0Hexo%E5%8D%9A%E5%AE%A2%E5%A4%9A%E7%BB%88%E7%AB%AF%E6%9B%B4%E6%96%B0%2F</url>
    <content type="text"><![CDATA[搭建完hexo博客后遇到的一个问题就是多终端更新，我们经常需要在自己的电脑或单位的电脑上更新博客，这需要一些操作，巧妙地使用git和branch即可实现多终端更新。 原理利用git的分支（branch）管理功能，hexo博客源文件放在hexo分支上，编译出来的html文件放在master分支上，以此实现多终端更新和同步。 操作方法网上关于hexo多终端更新的文章很多，基本原理大体一致，可以参考简书上的这篇文章Hexo博客的跨设备同步。接下来说一下容易遇到的问题。 疑难问题 编译后页面空白 原因这是因为主题theme文件夹下缺失第三方主题文件造成的，如果使用了第三方主题，第三方主题的文件夹大多是git repository，hexo源文件根目录在git init时会忽略已有的repository。 解决方法从原来电脑上把主题文件手动复制过来或使用git submodule功能（详见Git 工具 - 子模块）。 报错Error: Host key verification failed.这是因为未配置SSH Key，关于配置SSH Public Key，详情参考这篇文章hexo git配置问题笔记]]></content>
      <categories>
        <category>hello world</category>
      </categories>
      <tags>
        <tag>hello world</tag>
        <tag>hexo</tag>
        <tag>多终端更新</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客搭建的一些总结]]></title>
    <url>%2F2017%2F06%2F15%2FHexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[关于Hexo博客的搭建,官网提供了完善的文档，网上也能找到很多资料，这里就不再赘述了。 配置GitHubSSH 在gitbash中，配置github账户信息（YourName和YourEail都替换成自己的） 在gitbash中输入：ssh-keygen -t rsa -C &quot;youremail@example.com，生成ssh。然后找到id_rsa.pub文件的内容 将获取的ssh放到github中，添加一个New SSH key，title随便取，key就填刚刚那一段。在gitbash中验证是否添加成功：ssh -T git@github.com 常用hexo命令新建文章：hexo new &quot;Title&quot;生成博客：hexo g发布博客：hexo d]]></content>
      <categories>
        <category>hello world</category>
      </categories>
      <tags>
        <tag>hello world</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F06%2F15%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>hello world</category>
      </categories>
      <tags>
        <tag>hello world</tag>
      </tags>
  </entry>
</search>